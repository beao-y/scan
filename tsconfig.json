{ 
  "compilerOptions": {
    // ECMAScript 的目标版本（决定生成的代码是 ES5 还是 ES6 等）
    "target": "ES2022",
    // 启用 JSX 支持（如用于 Vue 的 TSX/JSX 语法）
    "jsx": "preserve",
    // 类型定义自动引入的库（默认会包含 dom、esnext 等）
    "lib": ["ES2020", "DOM", "DOM.Iterable", "dom"],
    "useDefineForClassFields": true,

    // 设置项目根路径，配合 paths 使用
    "baseUrl": ".",
    "module": "ESNext",

    /* Bundler mode */
    // 模块解析策略，Node 方式支持从 node_modules 中解析模块
    "moduleResolution": "node",
    // 启用源映射，便于调试（ts -> js 映射）
    "sourceMap": true,
    // 路径别名配置，@ 代表 src 目录，方便引入模块
    "paths": {
      "@/*": ["src/*"] // 路径映射，相对于baseUrl
    },
    "resolveJsonModule": true,
    "types": ["vite/client", "node"],
    // 编译结果是否使用 ES 模块的导出语法（import/export）
    "esModuleInterop": true,

    // 允许在 TS 文件中使用 JS（一般不建议）
    "allowImportingTsExtensions": true,

    // 允许在 JS 文件中使用 TypeScript（一般不建议）
    "allowJs": false,

    // 允许编译 JS 文件（如需使用 legacy 代码可开启）
    "checkJs": false,

    // 指定输出目录（Vite 会忽略它，一般不用）
    "outDir": "./dist",

    // 开启增量编译（提升大型项目编译效率）
    "incremental": true,

    /* Linting */
    // 开启严格模式（类型检查更严格，建议开启）
    "strict": true,

    "noFallthroughCasesInSwitch": true,

    // 禁止隐式的 any 类型（没有类型声明时报错）
    "noImplicitAny": false,

    // 禁止将 this 用在不合法的位置
    "noImplicitThis": false,

    // 不检查未使用的局部变量
    "noUnusedLocals": true,

    // 不检查未使用的函数参数
    "noUnusedParameters": true,

    "noEmit": true,

    // 允许默认导入非 ESModule 模块（兼容 CommonJS）
    "allowSyntheticDefaultImports": true,

    "composite": true,

    // 生成类型声明文件（一般用于库开发，可选）
    "declarationMap": false,

    // 生成的声明文件的目录（默认为 ./dist）
    "declarationDir": "./dist",


    // 不允许在导入语句中使用类型（import type）
    "isolatedModules": true,

    // 不检查 lib.d.ts 中的类型
    "skipLibCheck": true
  },
  // 指定引用的 tsconfig 文件
  "references": [{ "path": "./tsconfig.node.json" }],

  // 指定编译包含的文件（推荐指定为 src）
  "include": [
    "src/**/*.ts",
    "**/*.d.ts",
    "src/**/*.tsx",
    "src/**/*.vue",
    "./auto-imports.d.ts"
  ],

  // 排除 node_modules 和构建输出目录
  "exclude": ["node_modules", "dist"]
}
